# APure
# by Adam Hull
#
# Best with Inconsolata with Powerline
# https://github.com/powerline/fonts/blob/master/Inconsolata
#
# Derived from pure:
# https://github.com/sindresorhus/pure
# and agnoster
# https://gist.github.com/agnoster/3712874
# MIT License
#
# Read the ZSH vcs_info docs here:
# http://zsh.sourceforge.net/Doc/Release/User-Contributions.html#Version-Control-Information

# For my own and others sanity
# prompt:
# %F => color dict
# %f => reset color
# %~ => current path
# %* => time
# %n => username
# %m => shortname host
# %(?..) => prompt conditional - %(condition.true.false)
# terminal codes:
# \e7   => save cursor position
# \e[2A => move cursor 2 lines up
# \e[1G => go to position 1 in terminal
# \e8   => restore cursor position
# \e[K  => clears everything after the cursor on the current line
# \e[2K => clear everything on the current line

#
# Prompt rendering
#
BRANCH="\ue0a0" # Branch icon supplied by Powerline fonts
MERCURY="\u263F" # Unicode mercury icon
PRIMARY_BG=black
PRIMARY_FG=white

# Write a colorful segment
# Takes two arguments, background and foreground. Both can be omitted,
# rendering default background/foreground.
prompt_apure_color() {
  local bg fg
  [[ -n $1 ]] && bg="%K{$1}" || bg="%k"
  [[ -n $2 ]] && fg="%F{$2}" || fg="%f"
  print -n "%{$bg%}%{$fg%}"
  [[ -n $3 ]] && print -n $3
}

# Context: user@hostname (who am I and where am I)
prompt_apure_user() {
  # show username@host if logged in through SSH
  if [[ -n "$SSH_CONNECTION" ]]; then
    print -P "%(!.%{%F{yellow}%}.)%n@%m%{%f%} "
  fi
}

# Python virtualenv
prompt_apure_virtualenv() {
  if [[ -n "$VIRTUAL_ENV" ]]; then
    venv_last_2=$(basename $(dirname $VIRTUAL_ENV))/$(basename $VIRTUAL_ENV)
    print -P "($venv_last_2) "
  fi
}

# Renders "❱❱ <arg1> ❱❭"
# with an indicator for the current vim mode.
# Takes 1 arg: the text to put in the arrow.
prompt_apure_arrow() {
  # Signal VIM command or insert mode
  local mode_indicator
  if [[ $KEYMAP == 'vicmd' ]]; then
    mode_indicator="▏"
  else
    mode_indicator="❭"
  fi

  # Color red if previous command exited with an error code
  local color
  [[ -n $SSH_CONNECTION ]] && color="%F{yellow}" || color="%F{173}"
  [[ prompt_apure_exit_code -ne 0 ]] && color="%F{red}"

  # Several levels of escaping here:
  # 1: wrap control chars in %{...%} blocks so zsh can correctly count length
  # 2: escape %{ %} blocks to pass through return value.
  print -P "%%{${color}%%}❱❱ $1 ❱${mode_indicator}%%{%f%b%k%%}"
}

# Renders local path within a project
prompt_apure_proj_path() {
  local subdir="./$prompt_apure_vcs_info[subdir]"
  # Ignore subdir at root of project
  [[ "$subdir" == "./." ]] && subdir=""
  # Append trailing space to non-empty subdir
  [[ -n "$subdir" ]] && subdir="$subdir "
  print -P "$subdir"
}

# Renders current branch or bookmark
prompt_apure_branch() {
  local vcs=$prompt_apure_vcs_info[vcs]
  local branch icon
  if [[ $vcs == "git" ]]; then
    branch="${prompt_apure_vcs_info[branch]/.../}"
    icon=$BRANCH
  elif [[ $vcs == "hg" ]]; then
    branch="${prompt_apure_vcs_info[misc]}"
    icon=$MERCURY
  fi

  if [[ -n "$branch" ]]; then
    print -P "$icon $branch"
  fi
}

prompt_apure_render() {
  local vcs=$prompt_apure_vcs_info[vcs] # Ex: "git", "hg"
  local proj=$prompt_apure_vcs_info[base-name] # Project root folder name
  local action=$prompt_apure_vcs_info[action] # Rebase, merge, etc
  local dir_suffix="%2~" # ZSH prompt syntax for last to dirs of cwd

  if [[ -n $vcs ]]; then
    line1="$(prompt_apure_virtualenv)$(prompt_apure_proj_path)$(prompt_apure_branch)${action}"
    if [[ -n "$line1" ]]; then
line1="
${line1}"
    fi
PROMPT="$line1
$(prompt_apure_arrow $proj) "
  else
PROMPT="
$(prompt_apure_arrow $dir_suffix) "
  fi
}

# Potential alternative promp chars
# ▱▱ master ▱ src/web/styleguide
#▱ ops-purchase-orders ❱❭
# ❯
# ⦔
#  ▎garbanzo ▎▎master ▎
# ▱▱ ops-p ▱ master ❱❭
# ❱❭
# ▱▰▰▱ ▱▱▱ ▰▰▱▰▰
# ▏▎▍▏


#
# Hooks
#

prompt_apure_precmd() {
  prompt_apure_exit_code=$? # Record previous exit code before its clobbered
  prompt_apure_vcs_info=() # Clear stale info
	vcs_info
  prompt_apure_render
}

prompt_apure_preexec() {
	# shows the current dir and executed command in the title while a process is active
	prompt_apure_set_title 'ignore-escape' "$PWD:t: $2"
}

# redraw prompt on vim mode change
zle-line-init zle-keymap-select () {
  prompt_apure_render
  zle reset-prompt
}

prompt_apure_setup() {
	# prevent percentage showing up
	# if output doesn't end with a newline
	export PROMPT_EOL_MARK=''

	prompt_opts=(subst percent)

	zmodload zsh/zle
	autoload -Uz add-zsh-hook
	autoload -Uz vcs_info

	add-zsh-hook precmd prompt_apure_precmd
	add-zsh-hook preexec prompt_apure_preexec

	zstyle ':vcs_info:*' enable hg git
	zstyle ':vcs_info:*' use-simple true
	# only export one msg variables from vcs_info, to invoke our set-message hook
	zstyle ':vcs_info:*' max-exports 1
  # get-bookmarks requires get-revision
  zstyle ':vcs_info:hg*:*' get-revision true
  zstyle ':vcs_info:hg*:*' get-bookmarks true
  zstyle ':vcs_info:hg*+gen-hg-bookmark-string:*' hooks hg-bookmark-string
  zstyle ':vcs_info:*+set-message:*' hooks set-message

  # Debug
  # zstyle ':vcs_info:*+*:*' debug true

	# if the user has not registered a custom zle widget for clear-screen,
	# override the builtin one so that the preprompt is displayed correctly when
	# ^L is issued.
	if [[ $widgets[clear-screen] == 'builtin' ]]; then
		zle -N clear-screen prompt_apure_clear_screen
	fi
}

#
# vcs_info Hooks
#

# Stash all VCS info in a global associative array
# to use when we render the prompt.
# Alternative to format + vcs_info_msg_N_ that
# See the set-message hook_com keys for available data:
# http://zsh.sourceforge.net/Doc/Release/User-Contributions.html#Hooks-in-vcs_005finfo
typeset -g -A prompt_apure_vcs_info # global associative array
function +vi-set-message() {
  # set -A prompt_apure_vcs_info "${(@kv)hook_com}"
  # Copy keys and values from hook_com to prompt_apure_vcs_info
  prompt_apure_vcs_info=( "${(@kv)hook_com}" )
  # Uncomment the loop below to dump out all values for debugging
  # for k in ${(k)hook_com}; do
  #   echo "$k -> $hook_com[$k]"
  # done
}

# Customize to remove trailing * from active bookmark,
# only show active bookmark
function +vi-hg-bookmark-string() {
	if [[ -n "${hook_com[hg-active-bookmark]}" ]]; then
		hook_com[hg-bookmark-string]="${hook_com[hg-active-bookmark]}"

		# And to signal, that we want to use the string we just generated,
		# set the special variable `ret' to something other than the default
		# zero:
		ret=1
		return 0
	fi
}

#
# Helpers
#
prompt_apure_clear_screen() {
	# enable output to terminal
	zle -I
	# clear screen and move cursor to (0, 0)
	print -n '\e[2J\e[0;0H'
	# print preprompt
	prompt_apure_preprompt_render
}

prompt_apure_set_title() {
	# tell the terminal we are setting the title
	print -n '\e]0;'
	# show hostname if connected through ssh
	[[ -n $SSH_CONNECTION ]] && print -Pn '(%m) '
	case $1 in
		expand-prompt)
			print -Pn $2;;
		ignore-escape)
			print -rn $2;;
	esac
	# end set title
	print -n '\a'
}

prompt_apure_setup "$@"
